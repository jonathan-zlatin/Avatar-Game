jonathan.zl, nissbar2
208244848, 318871837

1. Describe the different classes you created in the package.

In the `trees` package, I created several classes to represent
different elements of trees and their components:

- `Tree`: Represents a full tree entity, composed of a trunk, leaves, and fruits.
- `Trunk`: Represents the trunk of a tree, with properties such as TopPosition and color.
- `Leaf`: Represents individual leave of a tree, with properties like angle, dimensions and color.
- `Fruit`: Represents individual fruit of a tree, with attributes such as color.

All of those classes are extending gameObjects, so they also have their father properties.

Additionally, within the `trees` package, there is the utility class `Flora`.
This class serves as a crucial manager for the generation of trees, leaves, and fruits
within the game environment. It consolidates the entire process of flora generation, including deciding
whether to plant trees and generating the various components like tree structures, leaves, and fruits.

One notable feature of the `Flora` class is its capability to save a list of all the trees
it generates. This decision was made with future usability in mind. By storing these objects
within `Flora`, we ensure convenient access to all generated flora entities.
This centralized repository of flora objects not only organizes management but also
facilitates potential future interactions or modifications with the flora within
the game environment.

2. Explain the connections between the departments.

The classes within the `trees` package are connected through composition and aggregation:

- `Tree` contains instances of `Trunk`, `Leaf`, and `Fruit`, indicating that a tree is composed
   of these components.
- `Flora` is responsible for generating instances of `Tree` along with its components,
   and it is connected to the `Terrain` class to determine suitable positions for tree placement.

All the Tree components do not interact with each other, they are unique individual gameObjects being
stored in their own tree. These connections ensure that the elements of a tree are properly organized
and managed within the package.

3. Did you use any design template?

Yes, we utilized the Observer pattern within the `Flora` class to observe changes in the avatar's
energy level. This pattern allows for decoupling between the flora objects and the avatar,
enabling them to react to changes in the avatar's state without directly depending on its
implementation details. Additionally, we have followed basic design principles like
encapsulation and composition to ensure modularity and maintainability within the package.

Furthermore, we used fundamental design principles such as encapsulation and composition to
promote modularity and maintainability within the package. By encapsulating the process of
object creation within the `Flora` class, we ensure that the main class responsible for
managing the game environment remains focused solely on its core responsibilities.

Moreover, we emphasized the Single Responsibility Principle by assigning the responsibility
of adding new objects to the game solely to the main class. The implementation details of
these objects are encapsulated within the `Flora` class, preserving the main class's clarity
and simplifying maintenance efforts. This design choice contributes to a more organized and
cohesive codebase, facilitating easier management and scalability of the game.

